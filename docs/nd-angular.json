[
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n\n(function() {\n\tangular.module('duck-angular')\n\t\t.controller('ModalController',ModalController);\n\n\tModalController.$inject=['duckClient','duckModal'];\n\tfunction ModalController(duckClient,duckModal)\n\t{\n\t\tvar vm = this;\n\t\t\n\t\tvm.resolve=duckModal.resolve;\n\t\tvm.cancel=duckModal.cancel;\n\t\t\n\t\t//vm.showAndReport=showAndReport;\n\t\n\t\tactivate();\n\t\tfunction activate ()\n\t\t{\n\t\t\t\n\t\t}\n\n\t}\n\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular document</p>",
      "summary": "<p>global angular document</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n(function (){\n\tvar myUrl = document.currentScript.src;//eslint-disable-line angular/ng_document_service\n\tangular.module('duck-angular').directive('duckModal', duckModal );\n\nduckModal.$inject=[];\nfunction duckModal()\n{\n\t\treturn {\n\t\t\tscope: {title:'@',flags:'@'},\n\t\t\tcontrollerAs:'modalVm',\n\t\t\tbindToController:true,\n\t\t\tcontroller: 'ModalController',\n\t\t\ttransclude: true,\n\t\t\ttemplateUrl: myUrl.replace('.js','.html')\n\t\t};\n}\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n\n(function() {\n\tangular.module('duck-angular')\n\t\t.controller('DirectoryController',DirectoryController);\n\n\tDirectoryController.$inject=['duckClient','$scope','$q'];\n\tfunction DirectoryController(duckClient,$scope,$q)\n\t{\n\t\tvar vm = this;\n\n\n\n\t\tvm.dir='';\n\n\t\tvar settingName=vm.settings.hasOwnProperty('sets')? vm.settings.sets:'installDir';\n\t\tvar sendingSettingPromise=$q.when();\n\n\t\tactivate();\n\n\n\t\tfunction activate ()\n\t\t{\n\n\t\t\t$scope.$watch(function () {\n\t\t\t\treturn vm.dir;\n\t\t\t},function(){\n\t\t\t\tvar toSend={};\n\t\t\t\ttoSend[settingName]=vm.dir;\n\t\t\t\tsendingSettingPromise.then(function(){duckClient.uiActions.setUserSettings(toSend);});\n\t\t\t\t\t\t\t\t\t\t});"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>hen(function(tree){<br />                    var getUniqueId=<br />                            (function (){<br />                                var uniqueIdCounter=-1;<br />                                return function(){<br />                                    uniqueIdCounter+=1;<br />                                    return uniqueIdCounter;<br />                                };})();</p><pre><code>                function treeWalk(treeNode,myName,parent)\n                {\n                    var treejsNode={};\n                    var myIdNum=getUniqueId();\n                    var myId=&#39;ajson&#39;+myIdNum;\n                    treejsNode.id=myId;\n                    treejsNode.parent=parent;\n                    treejsNode.text=myName;\n                    //treejsNode.__uiNodeId=myIdNum;\n                    treejsNode.state={ opened: false };\n                    vm.treeData.push(treejsNode);\n                    for(var key in treeNode)\n                    {\n                        treeWalk(treeNode[key],key,myId);\n                    }\n\n\n                }\n\n                var firstKey;\n                for(firstKey in tree){break;}\n                vm.treeData=[];\n                treeWalk(tree[firstKey],firstKey,&#39;#&#39;);\n\n\n                $timeout(function initTree()\n                                 {\n                    //vm.treeData=vm.dirTree;\n                    vm.treeConfig.version++;\n                    vm.applyModelChanges();\n                },100);\n            }).done();\n</code></pre>",
      "summary": "<p>hen(function(tree){<br />                    var getUniqueId=<br />                            (function (){<br />                                var uniqueIdCounter=-1;<br />                                return function(){<br />                                    uniqueIdCounter+=1;<br />                                    return uniqueIdCounter;<br />                                };})();</p>",
      "body": "<pre><code>                function treeWalk(treeNode,myName,parent)\n                {\n                    var treejsNode={};\n                    var myIdNum=getUniqueId();\n                    var myId=&#39;ajson&#39;+myIdNum;\n                    treejsNode.id=myId;\n                    treejsNode.parent=parent;\n                    treejsNode.text=myName;\n                    //treejsNode.__uiNodeId=myIdNum;\n                    treejsNode.state={ opened: false };\n                    vm.treeData.push(treejsNode);\n                    for(var key in treeNode)\n                    {\n                        treeWalk(treeNode[key],key,myId);\n                    }\n\n\n                }\n\n                var firstKey;\n                for(firstKey in tree){break;}\n                vm.treeData=[];\n                treeWalk(tree[firstKey],firstKey,&#39;#&#39;);\n\n\n                $timeout(function initTree()\n                                 {\n                    //vm.treeData=vm.dirTree;\n                    vm.treeConfig.version++;\n                    vm.applyModelChanges();\n                },100);\n            }).done();\n</code></pre>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "}"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>function dialogPicked()<br />        {<br />            vm.selectedDir=vm.selectedDirDialog;<br />        }<br />        function askDir()<br />        {<br />            duckModal.showModal().then(function(result){console.log(result);});<br />        }</p>",
      "summary": "<p>function dialogPicked()<br />        {<br />            vm.selectedDir=vm.selectedDirDialog;<br />        }<br />        function askDir()<br />        {<br />            duckModal.showModal().then(function(result){console.log(result);});<br />        }</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>function getTreeConfig()<br />        {<br />            return {<br />                core: {<br />                    multiple : false,<br />                    animation: true,<br />                    error: function(error) {<br />                        $log.error(&#39;treeCtrl: error from js tree - &#39; + angular.toJson(error));<br />                    },<br />                    check_callback : true,// eslint-disable-line camelcase<br />                    worker : true<br />                },<br />                types : {<br />                    default : {<br />                        icon : &#39;glyphicon glyphicon-flash&#39;<br />                    },<br />                    star : {<br />                        icon : &#39;glyphicon glyphicon-star&#39;<br />                    },<br />                    cloud : {<br />                        icon : &#39;glyphicon glyphicon-cloud&#39;<br />                    }<br />                },<br />                version : 1,<br />                plugins : [&#39;types&#39;,&#39;checkbox&#39;]<br />            };<br />        }</p>",
      "summary": "<p>function getTreeConfig()<br />        {<br />            return {<br />                core: {<br />                    multiple : false,<br />                    animation: true,<br />                    error: function(error) {<br />                        $log.error(&#39;treeCtrl: error from js tree - &#39; + angular.toJson(error));<br />                    },<br />                    check_callback : true,// eslint-disable-line camelcase<br />                    worker : true<br />                },<br />                types : {<br />                    default : {<br />                        icon : &#39;glyphicon glyphicon-flash&#39;<br />                    },<br />                    star : {<br />                        icon : &#39;glyphicon glyphicon-star&#39;<br />                    },<br />                    cloud : {<br />                        icon : &#39;glyphicon glyphicon-cloud&#39;<br />                    }<br />                },<br />                version : 1,<br />                plugins : [&#39;types&#39;,&#39;checkbox&#39;]<br />            };<br />        }</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "}\n\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular document</p>",
      "summary": "<p>global angular document</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n(function (){\n\tvar myUrl = document.currentScript.src;//eslint-disable-line angular/ng_document_service\n\tangular.module('duck-angular').directive('duckDirectory', function() {\n\n\t\treturn {\n\t\t\tscope: {settings:'='},\n\t\t\tbindToController: true,\n\t\t\tcontrollerAs:'vm',\n\t\t\tcontroller: 'DirectoryController',\n\t\t\ttemplateUrl: myUrl.replace('.js','.html')\n\t\t};});})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n(function (){\n\tvar myUrl = document.currentScript.src;\n\tangular.module('duck-angular')\n\t\t.directive('duckLoader', DuckLoaderDirective);\n\n\tDuckLoaderDirective.$inject=['duckClient'];\n\tfunction DuckLoaderDirective(duckClient)\n\t{\n\t\treturn {\n\t\t\tscope: {},\n\t\t\tcontroller:LoaderController,\n\t\t\ttemplateUrl: myUrl.replace('.js','.html')\n\t\t};\n\n\n\t}\n\n\tLoaderController.$inject=['duckPager','duckClient'];\n\tfunction LoaderController(duckPager,duckClient)\n\t{\n\t\tduckPager.show();\n\t\tduckClient.goNextPage(); \n\t}\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>lobal angular</p>",
      "summary": "<p>lobal angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n(function() {\n\tangular.module('duck-angular')\n\t\t.controller('DuckProgressController',DuckProgressController);\n\n\tDuckProgressController.$inject=['duckJobManager','duckPager','$scope'];\n\tfunction DuckProgressController(duckJobManager,duckPager,$scope)\n\t{\n\t\tvar vm=this;\n\n\t\tvm.estimate='';\n\t\tvm.title=0;\n\t\tvm.progress=0;\n\t\tactivate();\n\n\t\tfunction updateJobProgress(progress)\n\t\t{\n\t\t\tif(progress===null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvm.progress=progress.progress;\n\t\t\tvm.title=''+progress.progress + ' % done';\n\t\t\tif(progress.progress===100)\n\t\t\t{\n\t\t\t\tvm.estimate='';\n\t\t\t\tduckPager.setNextEnabled=true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvm.estimate=''+ progress.estimate + ' seconds remaining';\n\n\t\t\t}\n\n\t\t}\n\t\tfunction activate()\n\t\t{\n\t\t\tduckPager.setNextEnabled=false;\n\t\t\tduckPager.setBackEnabled=false;\n\t\t\t$scope.$watch(function(){return duckJobManager.getJobProgress(vm.settings.job);},updateJobProgress);\n\t\t\tduckJobManager.startJob(vm.settings.job);\n\t\t}\n\n\t}\n\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n(function (){\n\tvar myUrl = document.currentScript.src;\n\tangular.module('duck-angular')\n\t\t.directive('duckProgress', DuckProgressDirective);\n\n\tDuckProgressDirective.$inject=[];\n\tfunction DuckProgressDirective()\n\t{\n\t\treturn {\n\t\t\tscope: {settings:'='},\n\t\t\tbindToController: true,\n\t\t\tcontrollerAs:'vm',\n\t\t\tcontroller:'DuckProgressController',\n\t\t\ttemplateUrl: myUrl.replace('.js','.html')\n\t\t};\n\n\t}\n\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n\n(function() {\n\tangular.module('duck-angular')\n\t\t.controller('PagerController',PagerController);\n\n\tPagerController.$inject=['duckClient','duckPager'];\n\tfunction PagerController(duckClient,duckPager)\n\t{\n\t\tvar vm = this;\n\t\t\n\t\t\n\t\t\n\t\tvm.isBackEnabled=function(){return duckPager.isBackEnabled();};\n\t\tvm.isNextEnabled=function(){return duckPager.isNextEnabled();};\n\t\tvm.goBackPage=function(){return duckPager.goBackPage();};\n\t\tvm.goNextPage=function(){return duckPager.goNextPage();};\n\t\t\n\t\tvm.showPager=function(){return duckPager.isVisble();};\n\t\tactivate();\n\n\t\tfunction activate ()\n\t\t{\n\t\t\t//duckPager.registerChangeCallback(updateVisibilty);\n\t\t}\n\t\tfunction updateVisibilty(isVis)\n\t\t{\n\t\t\t//vm.showPager=isVis;\n\t\t}\n\n\n\t}\n\n})();\n'use strict';\n(function (){\n\tvar myUrl = document.currentScript.src;\nangular.module('duck-angular').directive('duckPager', ['duckClient',function(duck) {\n\t\n  return {\n\n\t\tscope: {},\n\t\tcontroller:'PagerController',\n\t\tcontrollerAs:'vm',\n    templateUrl: myUrl.replace('.js','.html')\n  };\n}]);\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n(function (){\n\t//var myUrl = document.currentScript.src;//eslint-disable-line angular/ng_document_service\n\tangular\n\t\t.module('duck-angular')\n\t\t.factory('duckJobManager', duckJobManager );\n\n\tduckJobManager.$inject=['duckEvents','duckLogger','$rootScope','duckClient'];\n\tfunction duckJobManager(duckEvents,duckLogger,$rootScope,duckClient)\n\t{\n\t\tvar jobsData;\n\n\t\tactivate();\n\t\treturn {\n\t\t\tgetJobProgress:\tgetJobProgress,\n\t\t\tstartJob: startJob\n\t\t};\n\t\tfunction startJob(jobName)\n\t\t{\n\t\t\tif(jobsData.hasOwnProperty(jobName))\n\t\t\t{\n\t\t\t\tduckLogger.debug(jobName +' already in job queue');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tduckClient.uiActions.startJob(jobName);\n\t\t}\n\t\tfunction getJobProgress(jobName)\n\t\t{\n\t\t\tif(jobsData.hasOwnProperty(jobName))\n\t\t\t{\n\t\t\t\treturn jobsData[jobName];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tfunction updateJobProgress(data)\n\t\t{\n\t\t\tvar jobName=data.value.jobName;\n\n\t\t\tif(jobsData.hasOwnProperty(jobName) && jobsData[jobName].progress===100)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tjobsData[jobName]={progress:parseInt(data.value.progress*100),\n\t\t\t\t\t\t\t\t\t\t\t\t\t estimate:parseInt(data.value.estimateLeft)};\n\t\t\t}\n\t\t}\n\t\tfunction updateJobDone(data)\n\t\t{\n\t\t\tvar jobName=data.value.jobName;\n\t\t\tjobsData[jobName]={progress:100,\n\t\t\t\t\t\t\t\t\t\t\t\t estimate:0};\n\t\t}\n\t\tfunction activate()\n\t\t{\n\t\t\tif(!duckClient.persistentData.hasOwnProperty('jobs'))\n\t\t\t{\n\t\t\t\tduckClient.persistentData.jobs={};\n\t\t\t}\n\t\t\tjobsData=duckClient.persistentData.jobs;\n\t\t\t$rootScope.$on('JobProgress',function(event,data){\n\t\t\t\tupdateJobProgress(data);\n\t\t\t});\n\n\t\t\t$rootScope.$on('JobDone',function(event,data){\n\t\t\t\tupdateJobDone(data);\n\t\t\t});\n\t\t}\n\n\n\t}\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n(function (){\n\t//var myUrl = document.currentScript.src;//eslint-disable-line angular/ng_document_service\n\tangular\n\t\t.module('duck-angular')\n\t\t.factory('duckModal', duckModal );\n\t\nduckModal.$inject=['$modal','$q'];\nfunction duckModal($modal,$q)\n{\n\t\tvar currentModalInstance;\n\t\treturn {\n\t\t\tshowModal\t:\tshowModal,\n\t\t\tresolve:resolve,\n\t\t\tcancel: cancel\n\t\t};\n\t\n\tfunction resolve(out)\n\t{\n\t\tcurrentModalInstance.close(out);\n\t}\n\tfunction cancel(out)\n\t{\n\t\tcurrentModalInstance.dismiss(out);\n\t}\n\tfunction showModal(params)\n\t{\n\t\tif(currentModalInstance)\n\t\t{\n\t\t\treturn $q.reject( 'already open' );\n\t\t}\n\t\tif(!params.hasOwnProperty('size'))\n\t\t{\n\t\t\tparams.size='sm';\n\t\t}\n\t\tif(!params.hasOwnProperty('animation'))\n\t\t{\n\t\t\tparams.animation=false;\n\t\t}\n\t\tif(!params.hasOwnProperty('windowClass'))\n\t\t{\n\t\t\tparams.windowClass='modal duck-modal modal-show';\n\t\t}"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>if(params.hasOwnProperty(&#39;id&#39;))<br />        {<br />            var elem=$document.find(params.id);<br />            debugger;<br />            params.template=elem.html();<br />            delete params.id;<br />        }</p>",
      "summary": "<p>if(params.hasOwnProperty(&#39;id&#39;))<br />        {<br />            var elem=$document.find(params.id);<br />            debugger;<br />            params.template=elem.html();<br />            delete params.id;<br />        }</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "currentModalInstance= $modal.open(params);\n\t\treturn currentModalInstance.result.finally(function(){currentModalInstance=null;});\n\t}\n}\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n(function (){\n\t//var myUrl = document.currentScript.src;//eslint-disable-line angular/ng_document_service\n\tangular\n\t\t.module('duck-angular')\n\t\t.factory('duckPager', duckPager );\n\n\tduckPager.$inject=['duckPages','duckLogger','$state'];\n\tfunction duckPager(duckPages,duckLogger,$state)\n\t{\n\t\tvar currenPageIdx=0;\n\t\tvar isVisible=false;\n\t\tvar nextEnabled=true;\n\t\t\n\t\tvar changeCallbacks=[];\n\t\treturn {\n\t\t\tshow:\tshow,\n\t\t\thide: hide,\n\t\t\tgetVisible: function(){return isVisible;},\n\t\t\tgetPageIdx:function(){return currenPageIdx;},\n\t\t\tisBackEnabled:isBackEnabled,\n\t\t\tisNextEnabled:isNextEnabled,\n\t\t\tgotoPageNumber:gotoPageNumber,\n\t\t\tgoNextPage:goNextPage,\n\t\t\tgoBackPage:goBackPage,\n\t\t\tsetNextEnabled:setNextEnabled,\n\t\t\tregisterChangeCallback: registerChangeCallback\n\t\t};\n\t\t\n\t\tfunction setNextEnabled(isNextEnabled)\n\t\t{\n\t\t\tnextEnabled=isNextEnabled;\n\t\t}\n\t\t\n\t\tfunction gotoPageNumber(pageNum)\n\t\t{\n\t\t\tif(pageNum>=0 && pageNum <duckPages.length)\n\t\t\t{\n\t\t\t\tduckLogger.debug('going to page '+pageNum);\n\t\t\t\t$state.go(duckPages[pageNum].name);\n\t\t\t\temitChange();\n\t\t\t}\n\n\t\t}\n\t\tfunction isBackEnabled()\n\t\t{\n\t\t\treturn currenPageIdx>0;\n\t\t}\n\t\t\n\t\tfunction isNextEnabled()\n\t\t{\n\t\t\treturn nextEnabled && currenPageIdx+1<duckPages.length;\n\t\t}\n\n\t\tfunction goNextPage()\n\t\t{ \n\t\t\tif(isNextEnabled())\n\t\t\t{\n\t\t\t\tcurrenPageIdx+=1;\n\t\t\t\tgotoPageNumber(currenPageIdx);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction goBackPage()\n\t\t{ \n\t\t\tif(this.isBackEnabled())\n\t\t\t{\n\t\t\t\tcurrenPageIdx-=1;\n\t\t\t\tgotoPageNumber(currenPageIdx);\n\t\t\t}\n\t\t}\n\n\t\tfunction emitChange()\n\t\t{\n\t\t\tangular.forEach(changeCallbacks, function(callback, idx) {\n\t\t\t\tvoid idx;\n\t\t\t\tcallback(isVisible,currenPageIdx);\n\t\t\t});\n\t\t}\n\t\tfunction show()\n\t\t{\n\t\t\tisVisible=true;\n\t\t\temitChange();\n\t\t}\n\t\tfunction hide()\n\t\t{\n\t\t\tisVisible=false;\n\t\t\temitChange();\n\t\t}\n\t\tfunction registerChangeCallback(callback)\n\t\t{\n\t\t\tchangeCallbacks.push(callback);\n\t\t}\n\n\n\t}\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n(function (){\n\t//var myUrl = document.currentScript.src;//eslint-disable-line angular/ng_document_service\n\tangular\n\t\t.module('duck-angular')\n\t\t.factory('duckUIActionsRegister', duckUIActionsRegister );\n\n\tduckUIActionsRegister.$inject=['$q'];\n\tfunction duckUIActionsRegister($q)\n\t{\n\n\t\treturn {\n\t\t\tregisterUiActions\t:\tregisterUiActions\n\t\t};\n\n\n\t\tfunction getCallUiActionClosure(uiActionName,callUiActionCallback)\n\t\t{\n\t\t\treturn function(args)\n\t\t\t{\n\t\t\t\treturn $q(function(resolve, reject) {\n\t\t\t\t\tcallUiActionCallback(\n\t\t\t\t\t\tuiActionName,args,function(err,succ)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(err)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t//TODO:log error\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve(succ);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t\t\n\t\t\n\n\t\tfunction registerUiActions(uiActionsMeta,callUiActionCallback,to)\n\t\t{\n\t\t\tfor(var actionName in uiActionsMeta){\n\t\t\t\t(function(){//create a unique scope for each iteration \n\t\t\t\t\tvar action = uiActionsMeta[actionName];\n\t\t\t\t\tvar actionFunc = getCallUiActionClosure(action.name,callUiActionCallback);\n\t\t\t\t\tvar paramArrayStr = action.paramNames.join(',');\n\t\t\t\t\tvar functionStr = '(function ui_action_'+action.name+'('+paramArrayStr+\n\t\t\t\t\t\t\t'){return actionFunc(arguments);})';"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>slint evil: true</p>",
      "summary": "<p>slint evil: true</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "to[action.name]=eval(functionStr); // eslint-disable-line no-eval"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>slint evil: false</p>",
      "summary": "<p>slint evil: false</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "})();}\n\t\t}\n\t}\n})();"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global angular</p>",
      "summary": "<p>global angular</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "'use strict';\n\n(function (){\n\t//var myUrl = document.currentScript.src;//eslint-disable-line angular/ng_document_service\n\tangular\n\t\t.module('duck-angular')\n\t\t.factory('duckEvents', duckEvents );\n\n\tduckEvents.$inject=['$rootScope','$interval','duckLogger','duckClient'];\n\tfunction duckEvents($rootScope,$interval,duckLogger,duckClient)\n\t{\n\t\tvar lastIdx=0;\n\t\tvar readyForCall=true;\n\t\tactivate();\n\t\treturn {\n\t\t\t\n\t\t};\n\t\t \n\t\tfunction checkForEvents()\n\t\t{\n\t\t\tif(readyForCall)\n\t\t\t{\n\t\t\t\treadyForCall=false;\n\t\t\tduckClient.uiActions.getNotificationsFromIdx(lastIdx).then(\n\t\t\t\tfunction(notificationsArray)\n\t\t\t\t{\n\t\t\t\t\tlastIdx+=notificationsArray.length;\n\t\t\t\t\tangular.forEach(notificationsArray,function(val,idx)\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\tvoid idx;\n\t\t\t\t\t\t$rootScope.$emit(val.name,val);\n\t\t\t\t\t\tduckLogger.debug('sending event ' +angular.toJson(val));\n\t\t\t\t\t});\n\t\t\t\t\treadyForCall=true;\n\t\t\t\t});\n\t\t\t}\n\t\t\t \n\t\t}\n\t\tfunction activate()\n\t\t{\n\t\t\t$interval(checkForEvents,200);\n\t\t}\n\t}\n})();\n\nangular.module('app').run(['$templateCache', function($templateCache) {\n  'use strict';\n\n  $templateCache.put('src/directives/folder_select/folder_select.html',\n    \"<input ng-model=\\\"vm.dir\\\" ng-model-options=\\\"{ debounce: 1000 }\\\" />\\r\" +\n    \"\\n\" +\n    \"<div onclick=\\\"this.children[0].click()\\\">Choose\\r\" +\n    \"\\n\" +\n    \"\\t<input type=\\\"file\\\" nwdirectory onchange=\\\"angular.element(this).scope().vm.dialogPicked(this)\\\" ng-hide=\\\"true\\\" />\\r\" +\n    \"\\n\" +\n    \"</div>\\r\" +\n    \"\\n\" +\n    \"\\r\" +\n    \"\\n\"\n  );\n\n\n  $templateCache.put('src/directives/modal/modal.html',\n    \"<div>\\r\" +\n    \"\\n\" +\n    \"\\t<div class=\\\"modal-header\\\">\\r\" +\n    \"\\n\" +\n    \"\\t\\t<h3 class=\\\"modal-title\\\">{{modalVm.title}}</h3>\\r\" +\n    \"\\n\" +\n    \"\\t</div>\\r\" +\n    \"\\n\" +\n    \"\\t<div class=\\\"modal-body\\\">\\r\" +\n    \"\\n\" +\n    \"\\t\\t<ng-transclude></ng-transclude>\\r\" +\n    \"\\n\" +\n    \"\\t</div>\\r\" +\n    \"\\n\" +\n    \"\\t<div class=\\\"modal-footer\\\">\\r\" +\n    \"\\n\" +\n    \"\\t\\t<button class=\\\"btn\\\" ng-click=\\\"modalVm.resolve('ok')\\\">OK</button>\\r\" +\n    \"\\n\" +\n    \"\\t\\t<button class=\\\"btn\\\" ng-click=\\\"modalVm.resolve('cancel')\\\">Cancel</button>\\r\" +\n    \"\\n\" +\n    \"\\t</div>\\r\" +\n    \"\\n\" +\n    \"</div>\"\n  );\n\n\n  $templateCache.put('src/directives/page_directives/directory/directory.html',\n    \"Installation Dir:\\r\" +\n    \"\\n\" +\n    \"\\r\" +\n    \"\\n\" +\n    \"<!--div js-tree=\\\"vm.treeConfig\\\" should-apply=\\\"vm.applyModelChanges()\\\" ng-model=\\\"vm.treeData\\\" ></div-->\\r\" +\n    \"\\n\" +\n    \"<duck-folder-select dir='vm.dir'></duck-folder-select>\\r\" +\n    \"\\n\"\n  );\n\n\n  $templateCache.put('src/directives/page_directives/loader/loader.html',\n    \"loading installer...\\r\" +\n    \"\\n\" +\n    \"<div class=\\\"loading-wheel\\\"></div>\"\n  );\n\n\n  $templateCache.put('src/directives/page_directives/progress/progress.html',\n    \"\\r\" +\n    \"\\n\" +\n    \"<progressbar max=\\\"100\\\" value=\\\"vm.progress\\\"><span style=\\\"color:black; white-space:nowrap;\\\">{{vm.title}}</span></progressbar>\\r\" +\n    \"\\n\" +\n    \"{{vm.estimate}}\"\n  );\n\n\n  $templateCache.put('src/directives/pager/pager.html',\n    \"<div class=\\\"pager\\\" ng-show=\\\"vm.showPager\\\"><ul class=\\\"pager\\\">\\r\" +\n    \"\\n\" +\n    \"\\t<li class=\\\"previous\\\" ng-class=\\\"{disabled:!vm.isBackEnabled()}\\\" ng-click=\\\"vm.goBackPage()\\\">\\r\" +\n    \"\\n\" +\n    \"\\t\\t<a href=\\\"javascript:void(0);\\\"><span aria-hidden=\\\"true\\\">&larr;</span> Back</a>\\r\" +\n    \"\\n\" +\n    \"\\t</li>\\r\" +\n    \"\\n\" +\n    \"\\t<li class=\\\"next\\\" ng-class=\\\"{disabled:!vm.isNextEnabled()}\\\" ng-click=\\\"vm.goNextPage()\\\">\\r\" +\n    \"\\n\" +\n    \"\\t\\t<a href=\\\"javascript:void(0);\\\">Next <span aria-hidden=\\\"true\\\">&rarr;</span></a>\\r\" +\n    \"\\n\" +\n    \"\\t</li>\\r\" +\n    \"\\n\" +\n    \"\\t</ul> \\r\" +\n    \"\\n\" +\n    \"</div>\"\n  );\n\n}]);"
  }
]